<?php

/*
 * Field API funcitons.
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function xpath_field_field_info() {

  return array(
    'xpath_field_xpath' => array(
      'label' => 'XPath Fragment',
      'description' => t('Pick out a fragment of XML from an XML field instance.'),
      'default_widget' => 'text_textfield',
      'default_formatter' => 'xpath_field_safe',
      'storage' => array(
        'type' => 'xpath_field_storage',
        'settings' => array(),
        'module' => 'xpath_field',
        'active' => 1,
      ),
    ),
  );
}

/**
 * Implementation of hook_field_create_field.
 * 
 * Sets the field's storage backend to our custom, non-persisting, backend.
 * @param Array $field
 */
function xpath_field_field_create_field($field) {
  if ($field['type'] == 'xpath_field_xpath') {
    $field['storage'] = array(
        'type' => 'xpath_field_storage',
        'settings' => array(),
        'module' => 'xpath_field',
        'active' => 1,
    );

    // Build record to update.
    $record = array(
      'id' => $field['id'],
      'storage_type' => $field['storage']['type'],
      'storage_module' => $field['storage']['module'],
      'storage_active' => $field['storage']['active'],
    );

    // Update the field storage.
    $primary_key = array('id');
    drupal_write_record('field_config', $record, $primary_key);
  }
}

/**
* Implements hook_field_update_field().
*/
function xpath_field_field_update_field($field) {
  xpath_field_field_create_field($field);
}

/**
 * Implementation of hook_storage_info
 * 
 * This info isn't properly saved by Drupal when a new vield instance is created.
 * @see xpath_field_field_create_field for a workaround.
 * 
 * @return Array
 */
function xpath_field_field_storage_info() {
  return array(
    'xpath_field_storage' => array(
      'label' => t('XPath derived field storage'),
      'description' => t('Transparent storage of derived XPath fragments.'),
      'settings' => array(),
    ),
  );
}

function xpath_field_field_storage_query(EntityFieldQuery $query) {

}

/**
 * Implementation of hook_field_storage_load().
 * 
 * Loads the XML field that this field derives its data from and runs the XPath query
 * to build the field data that attaches to an entity.
 * 
 * @param string $entity_type
 * @param array $entities
 * @param int $age
 * @param array $fields
 * @param array $options
 */
function xpath_field_field_attach_load($entity_type, $entities, $age, $options) {
  $load_current = $age == FIELD_LOAD_CURRENT;
  $map = field_info_field_map();
  foreach ($entities as $entity) {
    $bundle_name = $entity->type;
    $entity_info = field_info_instances($entity_type, $bundle_name);
    
    foreach($entity as $field_name => $field) {
      if (is_array($entity->{$field_name}) && $map[$field_name]['type'] == 'xpath_field_xpath') {

        $fragments = xpath_field_extract_fragments($entity_type, $entity, $field_name, $field);
        if (!empty($fragments)) {
          // Add the item to the field values for the entity.
          foreach ($fragments as $fragment_index => $fragment) {
            $entity->{$field_name}[$entity->language][] = array('value' => $fragment->asXml());
          }
        }
      }
    }
  }
}

function xpath_field_get_xml_data_from_field($xml_field_data, $settings) {
  return $xml_field_data['xml'];
}

function xpath_field_get_xml_data_from_remote_field($xml_field_data, $settings) {
  $prefix = $settings['url_prefix']['use_default'] ? variable_get('xpath_field_default_url_prefix') : $settings['url_prefix']['prefix'];
  $response = drupal_http_request($prefix . $xml_field_data['value']);
  if ($response->code == '200') {
    return $response->data;
  }
  else {
    watchdog('xpath_field', t('Got error @code form XML data source. Message: @message', array('@code' => $response->code, '@message' => $response->error)), NULL, WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Implementation of hook_widget_info().
 * 
 * @return array
 */
function xpath_field_field_widget_info() {
  return array(
    'xpath_field_xpath' => array(
      'label' => t('XPath text'),
      'field types' => array('xpath_field_xpath'),
    ),
  );
}

function _xpath_field_instance_xpath(array $instance) {
  return isset($instance['widget']['settings']['xpath']) ? $instance['widget']['settings']['xpath'] : '';
}

/**
 * Implementation of hook_field_widget_form().
 * 
 * Adds extra form elements to the node edit form. These elements are read-only and reflect
 * the result of the field instance's XPath query on the XML field it's been configured to point to.
 * 
 * @param array $form
 * @param array $form_state
 * @param array $field
 * @param array $instance
 * @param string $langcode
 * @param array $items
 * @param int $delta
 * @param array $element
 */
function xpath_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $xpath = _xpath_field_instance_xpath($instance);

  switch ($instance['widget']['type']) {
    case 'xpath_field_xpath':
      
      $entity = isset($element['#entity']) ? $element['#entity'] : NULL;
      
      if ($entity) {
        // We are attached to an entity, and not in the widget instance settings form.

        $element['xpath_element'] = array(
          '#type' => 'textfield',
          '#title' => "{$instance['label']} (Derrived with $xpath)",
          '#value' => $entity->{$instance['field_name']}[$element['#language']][$delta],
          '#attributes' => array('readonly' => 'readonly'),

        );
        break;
      }
  }

  return $element;
}

/**
 * Implementation of hook_field_formatter_info().
 * 
 * @return array
 */
function xpath_field_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'xpath_field_safe' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('xpath_field_xpath'),
    ),
  );
}

/**
 * Implementation of hook_field_validate().
 * 
 * Always returns true because the user doens't input this field directly.
 */
function xpath_field_field_validate($element, $form_state) {
  return TRUE;
}

/*
 * Field formatter functions.
 */
function xpath_field_field_formatter_info_alter(&$info) {
  
  $info['text_default']['field types'][] = 'xpath_field_xpath';
  $info['xsl_formatter']['field types'][] = 'xpath_field_xpath';
  
}

/**
 * Implementation of hook_field_formatter_view().
 * 
 * Puts the XPath field data into a simple markup field.
 * 
 * @param string $entity_type
 * @param StdClass $entity
 * @param array $field
 * @param array $instance
 * @param string $langcode
 * @param array $items
 * @param int $display
 * @return array
 */
function xpath_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'xpath_field_safe':
      foreach ($items as $index => $instance) {
        $element[$index] = array(
          '#type' => 'markup',
          '#markup' => $items[$index],
        );
      }
      break;
  }

  return $element;
}

/**
 * Implement hook_field_widget_settings_form().
 * 
 * Adds settings for XML Field and XPath value.
 */
function xpath_field_field_widget_settings_form($field, $instance) {

  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form = array();
  $form['xml_field_instance'] = array(
    '#type' => 'select',
    '#title' => t('Attach to XML Field'),
    '#description' => t('Select the XML field instance on this content type to grab an XPath value from.'),
  );

  $xml_field_instances = array();
  foreach (field_info_field_map() as $index => $other_field) {
    if (in_array($other_field['type'], array('xml_field_xml', 'text'))) {
      foreach ($other_field['bundles'] as $other_field_bundle_type_name => $other_field_bundle_type) {
        foreach ($other_field_bundle_type as $other_field_bundle) {
          if ($other_field_bundle == $instance['bundle']) {
            $field_info = field_info_instance($other_field_bundle_type_name, $index, $other_field_bundle);
            $form['xml_field_instance']['#options'][$index] = $field_info['label'] . " ($index)";
          }
        }
      }
    }
  }
  $form['is_remote_path'] = array(
    '#type' => 'checkbox',
    '#title' => 'Field is remote path.',
    '#description' => 'This field contains the path identifier from which to retrieve the XML content.',
    '#default_value' => isset($settings['is_remote_path']) ? $settings['is_remote_path'] : FALSE,
  );
  $form['url_prefix'] = array(
    '#type' => 'fieldset',
    '#title' => 'Remote field URL Prefix',
  );
  $form['url_prefix']['use_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use default (@default)', array('@default' => variable_get('xpath_field_default_url_prefix'))),
    '#default_value' => isset($settings['url_prefix']['use_default']) ? $settings['url_prefix']['use_default'] : TRUE,
  );
  $form['url_prefix']['prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Or, use a custom URL prefix for this field instance'),
    '#description' => t('If this is a remote XML path, this is the prefix to attach the path to to retrieve the document.'),
    '#default_value' => isset($settings['url_prefix']['prefix']) ? $settings['url_prefix']['prefix'] : '',
  );
  if (array_key_exists('xml_field_instance', $settings)) {
    $form['xml_field_instance']['#default_value'] = $settings['xml_field_instance'];
  }

  $form['xpath'] = array(
    '#type' => 'textfield',
    '#title' => t('XPath value'),
    '#description' => t('Enter the XPath to select a fragment from the XML Field instance.'),
    '#default_value' => array_key_exists('xpath', $settings) ? $settings['xpath'] : '',
  );

  return $form;
}

/**
 * Implementation of hook_form_field_ui_field_edit_form_alter().
 * Add a submit handler so we can clear Drupal's field cache.
 * @param Array $form
 * @param Array $form_state
 */
function xpath_field_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['module'] == 'xpath_field') {
    $form['#submit'][] = 'xpath_field_widget_settings_form_submit';
  }
}

/**
 * Since Drupal caches field contents we need to clear the field cache when the 
 * user changes the field settings.
 * @param Array $form
 * @param Array $form_state
 */
function xpath_field_widget_settings_form_submit($form, &$form_state) {
  drupal_set_message(t('The field cache has been cleared.'));
  field_cache_clear();
}

/**
 * Implementation of hook_field_is_empty().
 * 
 * Always FALSE because the field's value is populated dynamically.
 */
function xpath_field_field_is_empty($item, $field) {
  return FALSE;
}

/*
 * XML utility functions.
 */

/**
 * Runs an XPath query against the XML Field and returns the SimpleXMLElement containing
 * the results.
 * 
 * @param string $xml_string
 * @param string $xpath
 * @return SimpleXMLElement
 */
function xpath_field_get_xpath_fragment($xml_string, $xpath) {
  $result = array();
  try {
    $xml = new SimpleXMLElement($xml_string);
    $result = $xml->xpath($xpath);
  } catch (Exception $e) {
    drupal_set_message($e->getMessage());
  }
  return $result;
}

function xpath_field_get_xml_extractor($settings) {
  if ($settings['is_remote_path'] == True) {
    $xml_extractor = 'xpath_field_get_xml_data_from_remote_field';
  }
  else {
    $xml_extractor = 'xpath_field_get_xml_data_from_field';
  }
  return $xml_extractor;
}

function xpath_field_extract_fragments($entity_type, $entity, $field_name, $field) {
  $field_instance = field_info_instance($entity_type, $field_name, $entity->type);
  $settings = $field_instance['widget']['settings'];
  $xml_extractor = xpath_field_get_xml_extractor($settings);
  
  $xml_field_instance = isset($settings['xml_field_instance']) ? $settings['xml_field_instance'] : NULL;
  if ($xml_field_instance) {
    $lang = property_exists($entity, 'language') ? $entity->language : NULL;
    $xpath = _xpath_field_instance_xpath($field_instance);
    if ($lang !== NULL) {
      foreach ($entity->{$xml_field_instance}[$lang] as $xml_field_data) {
        $xml = $xml_extractor($xml_field_data, $settings);
        $fragments = xpath_field_get_xpath_fragment($xml, $xpath);
      }
    }
  }
  return $fragments;
}

/*
 * Drupal admin menu functions.
 */

/**
 * Implementation of hook_menu().
 */
function xpath_field_menu() {
  $menu = array(
    'admin/config/content/xpath-field' => array(
      'title' => t('XPath Field'),
      'description' => t('XPath Field global settings.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('xpath_field_settings_form'),
      'access arguments' => array('access administration pages'),
    ),
  );
  return $menu;
}

function xpath_field_settings_form($form, &$form_state) {
  $form['xpath_field_default_url_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Default URL prefix'),
    '#description' => t('For XML fields stored on remote servers, you can provide a default root URL that paths in field data will be appended to. E.g., "http://www.example.com/xml". If the field value contains a leading slash, then don\'t include a trailing slash in this field.'),
    '#default_value' => variable_get('xpath_field_default_url_prefix'),
    '#required' => FALSE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  return $form;
}

function xpath_field_settings_form_submit($form, &$form_state) {
  variable_set('xpath_field_default_url_prefix', $form_state['values']['xpath_field_default_url_prefix']);
  drupal_set_message(t('Saved XPath field settings.'), 'status');
}