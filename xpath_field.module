<?php

function xpath_field_field_info() {

  return array(
    'xpath_field_xpath' => array(
      'label' => 'XPath Fragment',
      'description' => t('Pick out a fragment of XML from an XML field instance.'),
      'default_widget' => 'text_textfield',
      'default_formatter' => 'xpath_field_safe',
      'storage' => array(
        'type' => 'xpath_field_storage',
        'settings' => array(),
        'module' => 'xpath_field',
        'active' => 1,
      ),
    ),
  );
}

function xpath_field_field_create_field($field) {
  if ($field['type'] == 'xpath_field_xpath') {
    $field['storage'] = array(
        'type' => 'xpath_field_storage',
        'settings' => array(),
        'module' => 'xpath_field',
        'active' => 1,
    );

    // Build record to update.
    $record = array(
      'id' => $field['id'],
      'storage_type' => $field['storage']['type'],
      'storage_module' => $field['storage']['module'],
      'storage_active' => $field['storage']['active'],
    );

    // Update the field storage.
    $primary_key = array('id');
    drupal_write_record('field_config', $record, $primary_key);
  }
}

/**
* Implements hook_field_update_field().
*/
function xml_field_field_update_field($field) {
  xpath_field_field_create_field($field);
}

function xpath_field_field_storage_info() {
  return array(
    'xpath_field_storage' => array(
      'label' => t('XPath derrived field storage'),
      'description' => t('Transparent storage of derrived XPath fragments.'),
      'settings' => array(),
    ),
  );
}

function xpath_field_field_storage_load($entity_type, $entities, $age, $fields, $options) {
  $load_current = $age == FIELD_LOAD_CURRENT;
dpm($fields);
return;
  foreach ($fields as $field_id => $ids) {
    // By the time this hook runs, the relevant field definitions have been
    // populated and cached in FieldInfo, so calling field_info_field_by_id()
    // on each field individually is more efficient than loading all fields in
    // memory upfront with field_info_field_by_ids().
    $field = field_info_field_by_id($field_id);
    $field_name = $field['field_name'];
    $table = $load_current ? _field_sql_storage_tablename($field) : _field_sql_storage_revision_tablename($field);

    $query = db_select($table, 't')->fields('t')->condition('entity_type', $entity_type)->condition($load_current ? 'entity_id' : 'revision_id', $ids, 'IN')->condition('language', field_available_languages($entity_type, $field), 'IN')->orderBy('delta');

    if (empty($options['deleted'])) {
      $query->condition('deleted', 0);
    }

    $results = $query->execute();

    $delta_count = array();
    foreach ($results as $row) {
      if (!isset($delta_count[$row->entity_id][$row->language])) {
        $delta_count[$row->entity_id][$row->language] = 0;
      }

      if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || $delta_count[$row->entity_id][$row->language] < $field['cardinality']) {
        $item = array();
        // For each column declared by the field, populate the item
        // from the prefixed database column.
        foreach ($field['columns'] as $column => $attributes) {
          $column_name = _field_sql_storage_columnname($field_name, $column);
          $item[$column] = $row->$column_name;
        }

        // Add the item to the field values for the entity.
        $entities[$row->entity_id]->{$field_name}[$row->language][] = $item;
        $delta_count[$row->entity_id][$row->language]++;
      }
    }
  }
}


function xpath_field_field_widget_info() {
  return array(
    'xpath_field_xpath' => array(
      'label' => t('XPath text'),
      'field types' => array('xpath_field_xpath'),
    )
  );
}

function xpath_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $widget = $element;
  $widget['#delta'] = $delta;
  $xpath = isset($instance['widget']['settings']['xpath']) ? $instance['widget']['settings']['xpath'] : '';
  
  switch ($instance['widget']['type']) {
    case 'xpath_field_xpath':

      $entity = isset($element['#entity']) ? $element['#entity'] : NULL;

      if ($entity) {
        // We are attached to a node, and not in the widget instance settings form.
        $xml_field_instance = isset($instance['widget']['settings']['xml_field_instance']) ? $instance['widget']['settings']['xml_field_instance'] : NULL;

        if ($xml_field_instance) {
          $lang = $entity->language;

          foreach ($entity->{$xml_field_instance}[$lang] as $xml_field_data) {
            $xml = $xml_field_data['xml'];
            $fragment = xpath_field_get_xpath_fragment($xml_field_data['xml'], $xpath);
          }
        }
        
        $element = array();
        $element['xpath_element'] = array(
          '#type' => 'textfield',
          '#title' => $instance['label'] . " (Derrived)",
          '#enabled' => FALSE,
        );

        $element['xpath_element']['#value'] = (string) $fragment[0];
        break;
      }
  }

  return $element;
}

function xpath_field_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'xpath_field_safe' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('xpath_field_xpath'),
    ),
  );
}

function xpath_field_field_validate($element, $form_state) {
  return TRUE;
}

function xpath_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'xpath_field_safe':

      $element[0] = array(
        
        '#type' => 'markup',
        '#markup' => 'Hi.',
      );

      break;
  }
dpm($element);
  return $element;
}

/**
 * Implement hook_field_widget_settings_form().
 */
function xpath_field_field_widget_settings_form($field, $instance) {

  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form = array();
  $form['xml_field_instance'] = array(
    '#type' => 'select',
    '#title' => t('Attach to XML Field'),
    '#description' => t('Select the XML field instance on this content type to grab an XPath value from.'),
  );

  $xml_field_instances = array();
  foreach (field_info_field_map() as $index => $other_field) {
    if ($other_field['type'] == 'xml_field_xml') {
      foreach ($other_field['bundles'] as $other_field_bundle_type_name => $other_field_bundle_type) {
        foreach ($other_field_bundle_type as $other_field_bundle) {
          if ($other_field_bundle == $instance['bundle']) {
            $field_info = field_info_instance($other_field_bundle_type_name, $index, $other_field_bundle);
            $form['xml_field_instance']['#options'][$index] = $field_info['label'] . " ($index)";
          }
        }
      }
    }
  }

  if (array_key_exists('xml_field_instance', $settings)) {
    $form['xml_field_instance']['#default_value'] = $settings['xml_field_instance'];
  }

  $form['xpath'] = array(
    '#type' => 'textfield',
    '#title' => t('XPath value'),
    '#description' => t('Enter the XPath to select a fragment from the XML Field instance.'),
    '#default_value' => array_key_exists('xpath', $settings) ? $settings['xpath'] : '',
  );
  return $form;
}

function xpath_field_field_is_empty($item, $field) {
  return FALSE;
}

function xpath_field_get_xpath_fragment($xml_string, $xpath) {
  $xml = new SimpleXMLElement($xml_string);
  $result = $xml->xpath($xpath);
  return $result;
}